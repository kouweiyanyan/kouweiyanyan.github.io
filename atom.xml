<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>_炎_炎_</title>
  
  <subtitle>追求完美的up主</subtitle>
  <link href="https://kouweiyanyan.github.io/atom.xml" rel="self"/>
  
  <link href="https://kouweiyanyan.github.io/"/>
  <updated>2023-08-11T16:06:57.730Z</updated>
  <id>https://kouweiyanyan.github.io/</id>
  
  <author>
    <name>@_炎_炎_@</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微服务</title>
    <link href="https://kouweiyanyan.github.io/posts/9521.html"/>
    <id>https://kouweiyanyan.github.io/posts/9521.html</id>
    <published>2023-08-13T15:39:00.000Z</published>
    <updated>2023-08-11T16:06:57.730Z</updated>
    
    <content type="html"><![CDATA[<h5 id="springcloud-alibaba第二代"><a href="#springcloud-alibaba第二代" class="headerlink" title="springcloud  alibaba第二代"></a>springcloud  alibaba第二代</h5><h6 id="本地负载均衡器"><a href="#本地负载均衡器" class="headerlink" title="本地负载均衡器"></a>本地负载均衡器</h6><blockquote><p>-1.什么是本地负载均衡器：我们消费者从我们的注册中心上获取接口调用地址列表。本地实现负载均衡算法（轮询、随机、hash一致性、权重）等。原理是获取接口地址列表，采用算法获取选择一个接口地址实现本地rpc远程地址。</p></blockquote><p>2.本地负载均衡器有哪些：自己写、ribbon springcloud 第一代中的、loadbalancerSpringcloud自己研发。</p><p>springcloud Rest或者openFeign都是默认支持ribbon.</p><p>3.本地负载衡器与nginx实现负载均衡器有哪些区别？</p><ul><li>nginx属于服务器端的负载均衡器，客户端所有的请求都统一交给我们的nginx，在由我们的nginx转发到我们的真实服务实现负载均衡。</li><li>本地负载均衡器：属于客户端的负载均衡。</li><li>nginx实现负载均衡器与本地负载均衡器应用场景：</li><li>本地负载均衡器属于客户端负载均衡器 一般用于微服务rpc远程调用 比如dubbo、rest模板、openfeign或者rpc远程调用框架。</li></ul><p>4.LoadBalancerClient      springcloud 根据服务id本地实现负载均衡器</p><p>5.openFeign客户端</p><ul><li><p>springcloud 第一代采用feign客户端 第二代采用openfeign客户端</p></li><li><p>openfeign客户端作用：是一个web声明式的http客户端远程调用工具。底层是封装HttpClient技术。</p></li><li>真正架构一个微服务项目 项目的架构模式：</li><li>—mayiket-meite-openfeign-parent-整个依赖分类</li><li>—-mayikt-service-api—开放的api接口 定义了接口没有任何代码业务实现</li><li>—-mayikt-service-api—member—-会员提供开放接口</li><li>—-mayikt-service-api-order—-订单提供的开放接口</li></ul><ul><li><p>—-mayikt-service-impl—对开放的api接口 代码业务实现</p></li><li><p>—-mayikt-service-impl—member—-会员提供开放接口</p></li><li><p>—-mayikt-service-impl-order—-订单提供的开放接口</p><p>注意:微服务架构基本的样式  最大的优点能够对我们feign客户端实现复用机制。</p><p>注意feign客户端调用事项：如果请求参数没有加上注解的话，默认采用post请求发送。openfeign默认是支持负载均衡,ribbon.</p></li></ul><h6 id="nacos分布式配置中心"><a href="#nacos分布式配置中心" class="headerlink" title="nacos分布式配置中心"></a>nacos分布式配置中心</h6><p>在项目中定义配置文件，最大的缺陷？如果在生产环境正在运行的时候突然需要修改配置文件的话，必须重启 我们的配置文件。</p><p>分布式配置中心的概念？ 使用专门的服务器统一存放管理我们整个的微服务的配置文件，能够完全动态实现对我们配置文件修改、新增、是不需要重启我们的服务器。</p><p>分布式配置中心的框架有哪些：携程的阿波罗（重量级的配置中心）、nacos（轻量级的）、springcloud config(没有界面)</p><p>nacos使用配置中心发布规则：</p><p>dadaid名称：默认的情况服务名称版本</p><p>注意事项：nacos本地如果也配置话，可能启动的时候会抛出异常。</p><p>config多环境配置区分</p><p>mayikt-nacos-client-dev.yaml</p><p>mayikt-nacos-client-prod.yaml</p><p>mayikt-nacos-client-test.yaml</p><p>mayikt-nacos-client-local.yaml</p><p>nacos默认嵌入小型的数据库，nacos实现集群模式</p><p>注意：nacos在windows版本下运行默认是单机版本 需要指定startup.cmd -m cluster</p><p>nacos在linux版本下运行默认是集群版本 如果连接单机版本 startup.cmd -m standalone.</p><p>集群的ip地址不能采用127.0.0.1进行集群注册</p><p>nacos与Eureka区别：</p><p>最大区别：nacos支持两种模式cp/Ap模式 从nacos1.0版本开始 注意 默认模式是Ap模式。</p><p>CAP定律概念：</p><ol><li>一致性(c):在分布式系统中，如果服务器是集群的情况下，每个节点同一个时刻查询的数据必须保持一致性的问题。</li><li>可用性(A):集群节点中，部分的节点出现了故障后任然可以继续使用，</li><li>分区容错性(P):在分布式系统中网络存在脑裂的问题，部分的Server与整个集群失去联系无法形成一个群体。</li></ol><p>取舍：只有在cp/AP做选择。</p><p>zookeeper采用cp保证数据的一致性问题，原理采用Zab原子广播协议，当我们的ZK领导因为某种原因宕机的情况下，会自动触发重新选一个新的领导角色，整个选举的过程为了保证数据的一致性问题，在选举过程中整个zk环境是不可以使用的，可能短暂无法使用到zk.</p><p>Eureka采用ap的设计理念架构注册中心，完全去中心化思想。也就是没有主从之分，每个节点都是均等的，采用相互注册原理，你中有我我中有你，你中有我我中有你，只要最后有一个eureka节点存在就可以保证整个微服务可以实现通讯。</p><p>ZK必须有一个领导角色</p><p>中心化 必须围绕一个领导角色作为核心，选举领导和更随着角色。</p><p>去中心化 每个角色都是均等的。</p><p>nacos与eureka区别：</p><p>Nacos从1.0版本支持cp和AP混合模式集群，默认采用AP保证服务的可用性，cp形式底层集群使用ratf协议保证数据的一致性问题。</p><p>如果采用Ap模式注册服务的实例仅支持临时注册形式。</p><p>分布式一致性协议的算法ratf协议</p><p>如何理解Eureka的PeerToPeer集群架构</p><p>ZAB协议与paxos协议实现区别</p><p>NacosRaft一致性协议心跳的实现原理</p><p>Eureka与nacos有哪些区别</p><p>1.Eureka采用AP模式实现注册中心</p><p>Nacos默认采用AP模式，在1.0版本之后采用AP+cp模式混合实现注册中心。</p><p>Eureka与Nacos底层实现集群协议哪些区别。是什么问题</p><p>去中心化对等。</p><p>Raft协议实现集群产生领导角色。</p><p>Raft到底是什么问题 分布式一致性协议的算法</p><p>分布式系统一致性算法    应用于系统软件实现集群保持每个节点数据的同步性保持我们的集群中每个节点的数据的一致性问题</p><p>场景：Redis集群、nacos集群、mongodb集群等。</p><p>分布式事务一致性框架与分布式系统一致性算法有哪些？</p><p>分布式事务一致性框架：核心解决我们在实际系统中产生跨事务导致分布式事务问题。</p><p>分布式系统一致性算法：解决我们系统之间集群之后每个节点保持数据的一致性。</p><p>有哪些分布式一致性算法：raft(nacos)、zab(zookeeper)、paxos等</p><p>Zookpper基于ZAP协议实现保持每个节点的数据同步问题，中心化思想化</p><p>我们在分布式系统，存在多个系统之间集群保持数据一致性，采用cp一致性算法保持数据的一致性问题。</p><p>Zookeeper基于ZAP协议实现保持每个节点的数据同步的问题，中心化思想集群模式：分为领导和跟随者角色。</p><p>在程序中如何成为一个节点能力比较强</p><p>对每个节点配置一个myid或者serverid还有数字越大能力越强或者随机时间</p><p>整个集群中为了保持数据的一致性的问题，必须满足大多数情况满足大于n/2+1，这个可运行的节点</p><p>ZAB的协议实现原理是通过比较myid myid谁最大谁就是领导角色。只要满足过半的机制就可以成为领导角色，后来启动的节点不会参与选举的。</p><p>如何保持数据一致性问题，所有的写的请求统一交给我们的领导角色实现，领导角色写完数据之后，领导角色在将数据同步给每个节点。</p><p>注意：数据之间同步采用2pc两阶段提交协议。</p><p>选举过程：</p><p>先去比较zxid zxid谁最大谁就是为领导角色</p><p>如果zxid相等的情况下，myid谁最大谁就为领导角色。</p><h6 id="在Raft协议算法中分为角色-名词"><a href="#在Raft协议算法中分为角色-名词" class="headerlink" title="在Raft协议算法中分为角色|名词"></a>在Raft协议算法中分为角色|名词</h6><p>1.状态：分为三种 跟随者、竞选者（候选人）、领导角色。</p><p>注意：任何算法都是来源生活。</p><p>2.大多数：大于=n/2+ 1   n表示集群的个数</p><p>3.任期：每次选举一个新的领导角色 任期都会实现增加</p><p>选举的过程是怎么样的？</p><p>1.默认情况下每个节点都是为跟随者</p><p>2.每个节点随机的生成一个选举的超时间，例如大概是100-300ms 在这个超时的时间范围类必须要等待。</p><p>3.超时时间过后，当前的节点的状态可能由跟随者变为竞选者状态，会给其它的节点发出选举的投票通知，只要该竞选者有超过半数以上即可选为领导角色。谁的超时时间最短，谁左右大概率的为领导角色。</p><p>核心设计的原理：谁的超时间端谁左右大概率的为领导角色。</p><p>那么如何随机数有可能一样的情况下，当前投票全部作废、重新进入随机生成超时时间。</p><p>如果有多个节点生成随机都是一样的情况下，比较谁的票数最多，谁就是为领导。</p><p>如果票数完全一样的情况，直接作废，重新进入随机生成超时时间。</p><p>建议集群的节点为奇数。</p><p>故障重新实现选举</p><p>1.如果我们的跟随者不能及时的收到领导角色的消息，那么这时候跟随者状态就会变为竞选者状态，发给其它的节点发出投票通知，只要竞选者有超过半数以上即可选举为领导角色。</p><p>数据是如何保持一致性的类似于zap两阶段提交协议。</p><p>所有的写请求都是统一交给我们的领导角色完成，会写入该对应的日志，标记该状态是为提交状态。</p><p>为了提交该日志，领导角色就会将该日志心跳的形式发送给其他跟随者。只要满足过半的跟随者可以写入该数据</p><h6 id="新一代网关GateWay"><a href="#新一代网关GateWay" class="headerlink" title="新一代网关GateWay"></a>新一代网关GateWay</h6><ol><li><p>Zuul与Gateway有哪些区别</p><p>zuul网关属于netfix公司开源框架，属于第一代微服务网关</p><p>GateWay属于springcloud自己研发的网关框架，属于第二代微服务网关。</p><p>相比来说Gateway比zuul网关的性能要好很多。</p><p>zuul网关底层基于Servlet实现，阻塞式api,不支持长连接。依赖springboot-web</p><p>springCloudGateway基于spring5构建，能够实现响应式非阻塞式api，支持长连接。依赖springboot-webFux</p></li><li><p>Gateway整合Nacos实现服务转发</p></li></ol><ol><li>基于Gateway拦截请求参数</li></ol><ol><li>Gateway集群原理分析</li></ol><h6 id="SpringcloudGateway"><a href="#SpringcloudGateway" class="headerlink" title="SpringcloudGateway"></a>SpringcloudGateway</h6><p>什么是微服务网关？</p><p>作用：就是可以实现用户的验证登录、解決跨域、日志拦截、权限控制、限流熔断、负载均衡、黑名单和白名单机制等。</p><p>微服务网关是整个微服务api接口的入口，可以实现过滤api请求。</p><p>微服务中的架构关系采用前后端分离，前端调用接口地址都能够被抓包分析到。</p><p>传统的方式我们可以使用过滤器拦截用户会话信息，这个过程所有的服务器都必须要写入该验证会话登录代码。</p><p>过滤器与网关的区别：</p><p>过滤器适合于单个服务实现过滤请求</p><p>网关拦截整个微服务实现过滤请求 能够解决整个微服务中冗余代码。</p><p>过滤器 局部拦截 网关全局拦截</p><p>网关服务的端口号一般是：80 或者是 443</p><p>网关与nginx的区别</p><p>微服务网关能够做的事情，Nginx也可以实现</p><p>相同点：都是可以实现api拦截，负载均衡、反向代理、请求过滤，可以完全和网关实现一样的效果。</p><p>不通点：</p><p>nginx采用c语言。gateway也就是java语言编写的。</p><h6 id="Gateway网关高可用集群与动态网关"><a href="#Gateway网关高可用集群与动态网关" class="headerlink" title="Gateway网关高可用集群与动态网关"></a>Gateway网关高可用集群与动态网关</h6><p>思考问题？如果我们使用网关宕机了，会出现什么情况下？导致我们整个微服务无法实现通信。</p><p>这时候必须网关实现集群，基于Nginx实现即可。</p><p>网关实现集群如何访问？使用nginx或者lvs虚拟vip</p><p>环境配置：</p><p>网关1   127.0.0.1:81</p><p>网关2   127.0.0.1:82</p><p>Nginx服务器  127.0.0.1:80</p><p>动态网关：任何配置都实现不用重启网关服务器都可以及时刷新网关配置。</p><p>实现思路：</p><p>1.分布式配置中心 不建议使用 阅读性差</p><p>2.基于数据表结构设计 特别建议，阅读性比较高。</p><p>基于数据库表形式的设计</p><div class="table-container"><table><thead><tr><th>id                    route_id             route_name                route_pattern              route_type          route_url</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>表id                  路由id                  路由名称                           路由模式                          路由类型                  路由地址</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>网关已经提供了api接口</p><p>1.直接新增</p><p>2.直接修改</p><p>思路：</p><p>​    当我们的网关服务启动的时候，从我们数据库查询网关配置，将数据库的内容读取到网关内存中。</p><ol><li>GateWay 的谓词有哪些</li></ol><ol><li>Gateway整体执行流程</li></ol><ol><li>GateWay深度源码分析</li></ol><ol><li>Gateway解决跨域的问题</li></ol><p>词汇表</p><p>路线：网关的基本构建它由id,目标url 谓词集合和过滤器定义，如果谓词为true,则匹配路由。</p><p>谓词： springcloud gateway 常用名词  Route路由 路由的id(唯一)、转发uri(真是的服务地址)、过滤器、谓词组成。</p><p>谓词匹配规则</p><p>filter: 这些是使用待定工厂构造的springframework GateFilter实例。在这里，您可以在下游请求之前或之后修改请求和响应。</p><p>微服务中跨域的问题  不属于前端解决 </p><p>核心点就是在我们的后端</p><p>解决跨域的问题</p><ol><li>httpClient 转发</li><li>jsonp 不支持我们的post 请求属于前端解决</li><li>NGinx解决跨域的问题保持我们域名和端口一致性。</li><li><p>使用过滤器允许接口可以跨域  响应头设置。</p></li><li><p>Nginx 也是通过配置文件解决跨域的问题。</p></li><li>基于微服务网关解决跨域问题。需要保持域名和端口一致性。</li><li>使用网关代码允许所有的服务可以跨域的问题。</li><li>使用springboot自带的@CrossOrigin注解。</li></ol><h6 id="sentinel-服务保护框架"><a href="#sentinel-服务保护框架" class="headerlink" title="sentinel 服务保护框架"></a>sentinel 服务保护框架</h6><p>服务的保护有哪些方案 黑名单和白名单 、对ip实现限流/熔断机制、服务降级、服务隔离机制。</p><ul><li>服务的限流：目的是为了保护我们的服务，在高并发的情况下，如何客户端请求服务器端到底的一定极限（设置阈值），请求的数量超出我们设置的阈值，开启我们的自我保护机制。直接执行我们的服务降级方法。不会执行我们的业务逻辑，走本地fallback方法。</li></ul><ul><li>服务的降级：在高并发的情况下，为了防止用户一直等待，采用限流或者熔断，保护我们服务，不会执行我们的业务逻辑。走本地的fallback方法。目的是为了给用户返回一个友好的提示给客户端。</li></ul><p>比如：返回给前端返回人数过多，请稍后重试</p><ul><li>服务雪崩的效应，默认情况下，tomcat/jetty 服务器只会有一个线程池处理所有的接口请求。</li></ul><p>这样话就是在高并发的情况下，如果客户端所有的请求都堆积到同一个接口上，那么会产生该服务器所有的线程都在处理该接口，可能会导致其它接口无法访问，短暂没有线程处理。</p><p>服务雪崩效应的解决方案： </p><ol><li>服务的隔离机制 通过线程池隔离或者信号量隔离机制。</li><li>线程池隔离：每个接口都有自己独立的线程池维护我们的请求，每个线程池互补影响。缺点：占用服务器内存非常大。</li><li>信号量隔离：设置允许我们某个接口有一阈值的线程数量处理我们的接口，如果超出该线程数量则拒接访问。</li></ol><p>sentinel与hystrix的区别</p><p>限流配置有两种方案：</p><ol><li>手动使用代码配置 纯代码/注解的形式。</li><li>sentinel控制台形式的配置</li><li>默认情况下Sentinel不对数据持久化，需要自己独立持久化。</li></ol><p>实现步骤：</p><p>创建我们的流控规则/限流规则，让后在被映射地址去引用。</p><p>， </p><p>当我们Springboot项目启动成功后，加载我们的限流规则。</p><p>下载sentinel  启动执行命令：java -jar sentinel-dashboard-1.8.1.jar —server.port=9090</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;springcloud-alibaba第二代&quot;&gt;&lt;a href=&quot;#springcloud-alibaba第二代&quot; class=&quot;headerlink&quot; title=&quot;springcloud  alibaba第二代&quot;&gt;&lt;/a&gt;springcloud  alibab</summary>
      
    
    
    
    
    <category term="计算机" scheme="https://kouweiyanyan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>云原生</title>
    <link href="https://kouweiyanyan.github.io/posts/9520.html"/>
    <id>https://kouweiyanyan.github.io/posts/9520.html</id>
    <published>2023-08-12T15:39:00.000Z</published>
    <updated>2023-08-11T15:56:52.258Z</updated>
    
    <content type="html"><![CDATA[<h4 id="k8s笔记"><a href="#k8s笔记" class="headerlink" title="k8s笔记"></a>k8s笔记</h4><blockquote><p>-JAVA<br>[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token<br>[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster<br>[bootstrap-token] Creating the “cluster-info” ConfigMap in the “kube-public” namespace<br>[kubelet-finalize] Updating “/etc/kubernetes/kubelet.conf” to point to a rotatable kubelet client certificate and key<br>[addons] Applied essential addon: CoreDNS<br>[addons] Applied essential addon: kube-proxy</p></blockquote><p>Your Kubernetes control-plane has initialized successfully!</p><p>To start using your cluster, you need to run the following as a regular user:</p><p>  mkdir -p $HOME/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>  sudo chown $(id -u):$(id -g) $HOME/.kube/config</p><p>Alternatively, if you are the root user, you can run:</p><p>  export KUBECONFIG=/etc/kubernetes/admin.conf</p><p>You should now deploy a pod network to the cluster.<br>Run “kubectl apply -f [podnetwork].yaml” with one of the options listed at:<br>  <a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/">https://kubernetes.io/docs/concepts/cluster-administration/addons/</a></p><p>You can now join any number of control-plane nodes by copying certificate authorities<br>and service account keys on each node and then running the following as root:</p><p>  kubeadm join cluster-endpoint:6443 —token pa5vdv.83ebix0qcne2ia9d \<br>    —discovery-token-ca-cert-hash sha256:140638f5d46fd376fb23160a458d149b1ca789cc4066ba05f0eb7d658a656922 \<br>    —control-plane </p><p>Then you can join any number of worker nodes by running the following on each as root:<br>//从节点加入主节点命令<br>kubeadm join cluster-endpoint:6443 —token pa5vdv.83ebix0qcne2ia9d \<br>    —discovery-token-ca-cert-hash sha256:140638f5d46fd376fb23160a458d149b1ca789cc4066ba05f0eb7d658a656922<br>[root@k8s-master ~]#<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：当下面命令过期了，要执行此命令可以获取新的 </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">kubeadm join cluster-endpoint:6443 --token pa5vdv.83ebix0qcne2ia9d \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:140638f5d46fd376fb23160a458d149b1ca789cc4066ba05f0eb7d658a656922 </span><br></pre></td></tr></table></figure></p><p> 在运行命令获取新的令牌</p><p><strong>kubeadm token create —print-join-command</strong></p><p>查看镜像日志命令</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubectl logs kubernetes-dashboard<span class="number">-6</span>dccb458d5-x7xft --<span class="keyword">namespace</span>=kube-system</span><br></pre></td></tr></table></figure><div class="tip "><p>default</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;k8s笔记&quot;&gt;&lt;a href=&quot;#k8s笔记&quot; class=&quot;headerlink&quot; title=&quot;k8s笔记&quot;&gt;&lt;/a&gt;k8s笔记&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;-JAVA&lt;br&gt;[bootstrap-token] configured RBAC ru</summary>
      
    
    
    
    
    <category term="计算机" scheme="https://kouweiyanyan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
</feed>
